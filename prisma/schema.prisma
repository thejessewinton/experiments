generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  membership    Member?
  candidate     Candidate?
}

model Candidate {
  id                 String @id @default(cuid())
  user               User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id            String @unique
  year_of_experience Int
  github_url         String
  job_title          String
  salary             Int
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Teams
model Team {
  id                     String   @id @default(cuid())
  slug                   String
  stripe_subscription_id String?
  is_upgraded            Boolean  @default(false)
  members                Member[]
  jobs                   Job[]
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MEMBER
}

model Member {
  id         String     @id @default(cuid())
  role       MemberRole @default(MEMBER)
  team       Team       @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id    String
  user       User       @relation(fields: [user_id], references: [id])
  user_id    String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@index([user_id])
  @@index([team_id])
}

// Jobs
model Job {
  id          String   @id @default(cuid())
  title       String
  salary      Int
  office_type String
  description String   @db.LongText()
  team        Team     @relation(fields: [team_id], references: [id])
  team_id     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([team_id])
}
