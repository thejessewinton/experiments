generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String     @id @default(cuid())
  name               String?
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  stripe_customer_id String?
  accounts           Account[]
  sessions           Session[]
  membership         Member?
  candidacy          Candidate?
  jobs               Job[]
  view               View[]
}

enum CandidateLevel {
  JUNIOR
  MID
  SENIOR
}

model Candidate {
  id                 String         @id @default(cuid())
  user               User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id            String         @unique
  year_of_experience Int
  github_url         String
  job_title          String
  salary             Int
  level              CandidateLevel @default(JUNIOR)
  jobs               Job[]
  languages          Language[]
  frameworks         Framework[]
  offers             Offer[]
}

model Language {
  id       String @id @default(cuid())
  language String

  candidate    Candidate @relation(fields: [candidate_id], references: [id])
  candidate_id String

  @@index([candidate_id])
}

model Framework {
  id   String @id @default(cuid())
  name String

  candidate    Candidate @relation(fields: [candidate_id], references: [id])
  candidate_id String

  @@index([candidate_id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Teams
model Team {
  id                     String        @id @default(cuid())
  slug                   String?
  stripe_subscription_id String?
  is_upgraded            Boolean       @default(false)
  members                Member[]
  jobs                   Job[]
  created_at             DateTime      @default(now())
  updated_at             DateTime      @updatedAt
  subscription           Subscription?
  seats                  Int           @default(1)
  tags                   Tag[]
  offers                 Offer[]
}

enum MemberRole {
  ADMIN
  MEMBER
}

model Member {
  id         String     @id @default(cuid())
  role       MemberRole @default(MEMBER)
  team       Team       @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id    String
  user       User       @relation(fields: [user_id], references: [id])
  user_id    String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@index([user_id])
  @@index([team_id])
}

enum JobStatus {
  OPEN
  INTERVIEWING
  OFFERED
  CLOSED
}

enum JobPriority {
  NO_PRIORITY
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Jobs
model Job {
  id          String      @id @default(cuid())
  title       String
  salary      Int
  office_type String
  status      JobStatus   @default(OPEN)
  priority    JobPriority @default(NO_PRIORITY)
  description String      @db.LongText()
  slug        String      @unique
  due_date    DateTime?
  team        Team?       @relation(fields: [team_id], references: [id])
  team_id     String?
  user        User        @relation(fields: [user_id], references: [id])
  user_id     String
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  candidates Candidate[]
  tags       Tag[]
  Offer      Offer[]

  @@index([user_id])
  @@index([team_id])
}

model Offer {
  id           String    @id @default(cuid())
  job_id       String
  team_id      String
  team         Team      @relation(fields: [team_id], references: [id])
  job          Job       @relation(fields: [job_id], references: [id])
  candidate    Candidate @relation(fields: [candidate_id], references: [id])
  candidate_id String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([team_id])
  @@index([job_id])
  @@index([candidate_id])
}

model Tag {
  id    String @id @default(cuid())
  value String
  color String @default("#7f1d1d")

  team    Team   @relation(fields: [team_id], references: [id])
  team_id String
  job     Job[]

  @@index([team_id])
}

// UI/Views
enum ViewState {
  LIST
  BOARD
}

model View {
  id      String    @default(cuid())
  state   ViewState @default(LIST)
  route   String    @default("")
  user_id String
  user    User      @relation(fields: [user_id], references: [id])

  @@id([route, user_id], name: "route_view")
  @@index([user_id])
}

model Subscription {
  id                     String   @id @default(cuid())
  team_id                String   @unique
  team                   Team     @relation(fields: [team_id], references: [id])
  stripe_subscription_id String   @unique
  stripe_price_id        String   @default("")
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  @@index([team_id])
}
